üìÑ Documenta√ß√£o da API de Gest√£o de Usu√°rios (Users API)

1. Vis√£o Geral do Projeto

Esta API RESTful foi desenvolvida em ASP.NET Core e C#, com o objetivo de gerenciar dados de usu√°rios. Ela implementa as opera√ß√µes CRUD (Create, Read, Update, Delete) e utiliza o Supabase como servi√ßo de banco de dados, atrav√©s de uma camada de servi√ßo (BancoDados.cs).
Componente	Fun√ß√£o
Tecnologia	ASP.NET Core 8+ (C#)
Banco de Dados	Supabase (PostgreSQL)
Padr√£o	RESTful (CRUD)
URL Base	https://localhost:[PORTA]/api/Users (substituir [PORTA] pela porta local)

2. Modelos de Dados (DTOs)

A. Objeto de Resposta (UserResponseDto)

Este √© o formato de dados retornado por rotas GET. √â um DTO ("Data Transfer Object") limpo, sem metadados do Supabase, garantindo a serializa√ß√£o correta em JSON.
Campo	Tipo	Descri√ß√£o	Exemplo
id	int	Identificador √∫nico do usu√°rio no banco.	5
name	string	Nome completo do usu√°rio.	"Maria Silva"
bio	string	Breve biografia ou descri√ß√£o.	"Dev C# J√∫nior"
telefone	string	N√∫mero de telefone de contato.	"77988887777"

B. Objeto de Cria√ß√£o (UserCreationDto)

Este √© o formato esperado no corpo de uma requisi√ß√£o POST.
Campo	Tipo	Descri√ß√£o
name	string	Nome do usu√°rio.
bio	string	Biografia.
telefone	string	Telefone.

C. Objeto de Atualiza√ß√£o (UpdateDto)

Este √© o formato esperado no corpo de uma requisi√ß√£o PUT.
Campo	Tipo	Descri√ß√£o
onde	int	Indica qual campo ser√° atualizado: 1 para name, 2 para bio, 3 para telefone.
novoValor	string	O novo valor a ser aplicado ao campo.

3. Endpoints da API (Rotas)

A documenta√ß√£o a seguir √© baseada na rota base: /api/Users.
M√©todo	Endpoint	Descri√ß√£o	Corpo da Requisi√ß√£o	C√≥digo de Retorno
GET	/api/Users	Retorna uma lista de todos os usu√°rios.	Nenhum	200 OK + List<UserResponseDto>
GET	/api/Users/{id}	Retorna um √∫nico usu√°rio pelo ID.	Nenhum	200 OK + UserResponseDto ou 404 Not Found
POST	/api/Users	Cria um novo usu√°rio.	UserCreationDto	201 Created
PUT	/api/Users/{chave}	Atualiza um campo espec√≠fico do usu√°rio (Nome, Bio ou Telefone) pelo ID.	UpdateDto	204 No Content
DELETE	/api/Users/{id}	Remove um usu√°rio pelo ID.	Nenhum	204 No Content

4. Implementa√ß√£o de Servi√ßos (BancoDados.cs)

O projeto utiliza uma arquitetura de Inje√ß√£o de Depend√™ncia, onde a classe BancoDados √© registrada como um scoped service.

    O cliente Supabase √© injetado no construtor de BancoDados, garantindo uma √∫nica inst√¢ncia e inicializa√ß√£o correta.

    Os m√©todos de servi√ßo (MostrarTodos, Inserir, etc.) s√£o respons√°veis por:

        Fazer a comunica√ß√£o ass√≠ncrona com o Supabase (await).

        Mapear os modelos de banco (User) para os DTOs de resposta (UserResponseDto) antes de retornar ao Controller.